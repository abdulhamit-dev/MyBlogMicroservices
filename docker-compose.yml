version: '3.8'

services:
  MyBlog_CategoryDb:
    image: mongo:latest
    container_name: MyBlog_CategoryDb
    ports:
      - "27020:27017"
    volumes:
      - category_data:/data/db
    command: ["mongod", "--port", "27020"]
    networks:
      - categorydb-net

  MyBlog_ReactionDb:
    image: mongo:latest
    container_name: MyBlog_ReactionDb
    ports:
      - "27019:27017"
    volumes:
      - reaction_data:/data/db

  MyBlog_CommentDb:
    image: couchbase:community
    container_name: MyBlog_CommentDb
    ports:
      - "8091-8094:8091-8094"
    expose:
      - "11210:11210"
      - "8095-8097"
      - "11207"
      - "11280"
    volumes:
      - comment_data:/opt/couchbase/var
    networks:
      - commentdb-net

  MyBlog_ContentDb:
    image: mongo:latest
    container_name: MyBlog_ContentDb
    ports:
      - "27018:27017"
    volumes:
      - content_data:/data/db
    command: ["mongod", "--port", "27018"]
    networks:
      - contentdb-net

  MyBlog_IdentityDb:
    image: mongo:latest
    container_name: MyBlog_IdentityDb
    ports:
      - "27021:27017"
    volumes:
      - identity_data:/data/db
  
  MyBlog_Rabbitmq:
    image: rabbitmq:3.11.16-management
    container_name: MyBlog_Rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - rabbitmq
    restart: always
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
  
  # MyBlog_Datalust_Seq:
  #   image: datalust/seq:latest
  #   container_name: MyBlog_Datalust_Seq
  #   ports:
  #     - "5341:80"
  #   environment:
  #     - ACCEPT_EULA=Y
  #   volumes:
  #     - datalust_seq_data:/data
  
  Myblog_RedisDb:
    image: redis:latest
    container_name: Myblog_RedisDb
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - redis-net
    command: ["--port", "6379"]
  
  # MyBlog_Minio: 
  #   image: minio/minio
  #   container_name: MyBlog_Minio
  #   ports:
  #     - "9000:9000"
  #     - "9001:9001"
  #   volumes:
  #     - minio_data:/data
  #   environment:
  #     MINIO_ROOT_USER: admin
  #     MINIO_ROOT_PASSWORD: Strong#Pass#2023
  #   command: server --console-address ":9001" /data
  
  # MyBlog_Elasticsearch:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:8.7.1
  #   container_name: MyBlog_Elasticsearch
  #   expose:
  #     - 9200
  #   environment:
  #     - xpack.security.enabled=false
  #     - "discovery.type=single-node"
  #     - ELASTIC_USERNAME=elastic
  #     - ELASTIC_PASSWORD=DkIedPPSCb
  #   networks:
  #     - es-net
  #   ports:
  #     - 9200:9200
  #   volumes:
  #     - elasticsearch-data:/usr/share/elasticsearch/data
  
  # MyBlog_Kibana:
  #   image: docker.elastic.co/kibana/kibana:8.7.1
  #   container_name: MyBlog_Kibana
  #   environment:
  #     - ELASTICSEARCH_HOSTS=http://myblog_elasticsearch:9200
  #   expose:
  #     - 5601
  #   networks:
  #     - es-net
  #   depends_on:
  #     - MyBlog_Elasticsearch
  #   ports:
  #     - 5601:5601
  #   volumes:
  #     - kibana-data:/usr/share/kibana/data

  # MyBlog_Jaeger:
  #   image: jaegertracing/all-in-one:latest
  #   container_name: MyBlog_Jaeger
  #   environment:
  #     - COLLECTOR_ZIPKIN_HOST_PORT=:9411
  #   ports:
  #     - "6831:6831/udp"
  #     - "6832:6832/udp"
  #     - "5778:5778"
  #     - "16686:16686"
  #     - "4317:4317"
  #     - "4318:4318"
  #     - "14250:14250"
  #     - "14268:14268"
  #     - "14269:14269"
  #     - "9411:9411"
  #   volumes:
  #     - jaeger-data:/var/jaeger
  
  Category_Api:
    container_name: Category_Api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - DatabaseSettings:ConnectionString=mongodb://MyBlog_CategoryDb:27020
      - CacheService=http://Cache_Api/api/
    image: category_api_image
    build: 
      context: .
      dockerfile: Services/Category/CategoryAPI/Dockerfile
    ports:
      - "5019:80"
    depends_on:
      - MyBlog_CategoryDb
      - Cache_Api
    networks:
      - redis-net
      - categorydb-net
  
  Cache_Api:
    container_name: Cache_Api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - RedisConnection=Myblog_RedisDb:6379
    image: cache_api_image
    build: 
      context: .
      dockerfile: Services/Cache/CacheAPI/Dockerfile
    ports:
      - "5021:80"
    depends_on:
      - Myblog_RedisDb
    networks:
      - redis-net
  
  Comment_Api:
    container_name: Comment_Api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - Couchbase:ConnectionString=couchbase://MyBlog_CommentDb
      - RabbitMQ=MyBlog_Rabbitmq
    image: comment_api_image
    build: 
      context: .
      dockerfile: Services/Comment/CommentAPI/Dockerfile
    ports:
      - "5016:80"
    depends_on:
      - MyBlog_CommentDb
      - MyBlog_Rabbitmq
    networks:
      - rabbitmq
      - commentdb-net
  
  Content_Api:
    container_name: Content_Api
    restart: always
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - RabbitMQ=MyBlog_Rabbitmq
      - DatabaseSettings:ConnectionString=mongodb://MyBlog_ContentDb:27018
    image: content_api_image
    build: 
      context: .
      dockerfile: Services/Content/ContentAPI/Dockerfile
    ports:
      - "5015:80"
    depends_on:
      - MyBlog_Rabbitmq
      - MyBlog_ContentDb
    networks:
      - rabbitmq
      - contentdb-net

networks:
  rabbitmq:
    driver: bridge
  # es-net:
  #   driver: bridge
  redis-net:
  categorydb-net:
  commentdb-net:
  contentdb-net:

volumes:
  category_data:
  reaction_data:
  comment_data:
  content_data:
  identity_data:
  rabbitmq_data:
  # datalust_seq_data:
  # minio_data:
  redis_data:
  # elasticsearch-data:
  #   driver: local
  # kibana-data:
  #   driver: local
  # jaeger-data: 