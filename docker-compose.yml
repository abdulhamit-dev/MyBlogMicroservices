version: '3.8'

services:
  myblog-categorydb:
    image: mongo:latest
    container_name: myblog-categorydb
    ports:
      - "27017:27017"
    volumes:
      - category_data:/data/db
    command: ["mongod", "--port", "27017"]
    networks:
      - categorydb-net

  myblog-reactiondb:
    image: mongo:latest
    container_name: myblog-reactiondb
    ports:
      - "27018:27018"
    volumes:
      - reaction_data:/data/db
    command: ["mongod", "--port", "27018"]
    networks:
      - reactiondb-net

  myblog-commentdb:
    image: couchbase:community
    container_name: myblog-commentdb
    ports:
      - "8091-8094:8091-8094"
    expose:
      - "11210:11210"
      - "8095-8097"
      - "11207"
      - "11280"
    volumes:
      - comment_data:/opt/couchbase/var
    networks:
      - commentdb-net

  myblog-contentdb:
    image: mongo:latest
    container_name: myblog-contentdb
    ports:
      - "27019:27019"
    volumes:
      - content_data:/data/db
    command: ["mongod", "--port", "27019"]
    networks:
      - contentdb-net

  myblog-identitydb:
    image: mongo:latest
    container_name: myblog-identitydb
    ports:
      - "27020:27020"
    volumes:
      - identity_data:/data/db
    command: ["mongod", "--port", "27020"]
    networks:
      - identitydb-net
  
  myblog-rabbitmq:
    image: rabbitmq:3.11.16-management
    container_name: myblog-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - rabbitmq
    restart: always
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
  
  myblog-datalust-seq:
    image: datalust/seq:latest
    restart: always
    container_name: myblog-datalust-seq
    ports:
      - "5341:80"
    environment:
      - ACCEPT_EULA=Y
    volumes:
      - datalust_seq_data:/data
    networks:
      - logger-net
  
  myblog-redisdb:
    image: redis:latest
    container_name: myblog-redisdb
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - redis-net
    command: ["--port", "6379"]
  
  myblog-minio: 
    image: minio/minio
    container_name: myblog-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: Strong#Pass#2023
    command: server --address :9000 --console-address ":9001" /data
    networks:
      - minio-net
  
  # MyBlog_Elasticsearch:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:8.7.1
  #   container_name: MyBlog_Elasticsearch
  #   expose:
  #     - 9200
  #   environment:
  #     - xpack.security.enabled=false
  #     - "discovery.type=single-node"
  #     - ELASTIC_USERNAME=elastic
  #     - ELASTIC_PASSWORD=DkIedPPSCb
  #   networks:
  #     - es-net
  #   ports:
  #     - 9200:9200
  #   volumes:
  #     - elasticsearch-data:/usr/share/elasticsearch/data
  
  # MyBlog_Kibana:
  #   image: docker.elastic.co/kibana/kibana:8.7.1
  #   container_name: MyBlog_Kibana
  #   environment:
  #     - ELASTICSEARCH_HOSTS=http://myblog_elasticsearch:9200
  #   expose:
  #     - 5601
  #   networks:
  #     - es-net
  #   depends_on:
  #     - MyBlog_Elasticsearch
  #   ports:
  #     - 5601:5601
  #   volumes:
  #     - kibana-data:/usr/share/kibana/data

  # MyBlog_Jaeger:
  #   image: jaegertracing/all-in-one:latest
  #   container_name: MyBlog_Jaeger
  #   environment:
  #     - COLLECTOR_ZIPKIN_HOST_PORT=:9411
  #   ports:
  #     - "6831:6831/udp"
  #     - "6832:6832/udp"
  #     - "5778:5778"
  #     - "16686:16686"
  #     - "4317:4317"
  #     - "4318:4318"
  #     - "14250:14250"
  #     - "14268:14268"
  #     - "14269:14269"
  #     - "9411:9411"
  #   volumes:
  #     - jaeger-data:/var/jaeger
  
  category-api:
    container_name: category-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - DatabaseSettings:ConnectionString=mongodb://myblog-categorydb:27017
      - CacheService=http://cache-api/api/
    image: category_api_image
    build: 
      context: .
      dockerfile: Services/Category/CategoryAPI/Dockerfile
    ports:
      - "5019:80"
    depends_on:
      - myblog-categorydb
      - cache-api
    networks:
      - redis-net
      - categorydb-net
  
  cache-api:
    container_name: cache-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - RedisConnection=myblog-redisdb:6379
    image: cache_api_image
    build: 
      context: .
      dockerfile: Services/Cache/CacheAPI/Dockerfile
    ports:
      - "5021:80"
    depends_on:
      - myblog-redisdb
    networks:
      - redis-net
  
  comment-api:
    container_name: comment-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - Couchbase:ConnectionString=couchbase://myblog-commentdb
      - RabbitMQ=myblog-rabbitmq
    image: comment_api_image
    build: 
      context: .
      dockerfile: Services/Comment/CommentAPI/Dockerfile
    ports:
      - "5016:80"
    depends_on:
      - myblog-commentdb
      - myblog-rabbitmq
    networks:
      - rabbitmq
      - commentdb-net
  
  content-api:
    container_name: content-api
    restart: always
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - RabbitMQ=myblog-rabbitmq
      - DatabaseSettings:ConnectionString=mongodb://myblog-contentdb:27019
    image: content_api_image
    build: 
      context: .
      dockerfile: Services/Content/ContentAPI/Dockerfile
    ports:
      - "5015:80"
    depends_on:
      - myblog-rabbitmq
      - myblog-contentdb
    networks:
      - rabbitmq
      - contentdb-net
  
  identity-api:
    container_name: identity-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - DatabaseSettings:ConnectionString=mongodb://myblog-identitydb:27020
    image: identity_api_image
    build: 
      context: .
      dockerfile: Services/Identity/IdentityAPI/Dockerfile
    ports:
      - "5001:80"
    depends_on:
      - myblog-identitydb
    networks:
      - identitydb-net

  imagestore-api:
    container_name: imagestore-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ImageStoreUrl=myblog-minio:9000
    image: imagestore_api_image
    build: 
      context: .
      dockerfile: Services/ImageStore/ImageStoreAPI/Dockerfile
    ports:
      - "5018:80"
    depends_on:
      - myblog-minio
    networks:
      - minio-net
  
  log-api:
    container_name: log-api
    restart: always
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - RabbitMQ=MyBlog_Rabbitmq
      - LogDb=http://myblog-datalust-seq:5341
    image: logger_api_image
    build: 
      context: .
      dockerfile: Services/Logger/LogAPI/Dockerfile
    ports:
      - "5020:80"
    depends_on:
      - myblog-datalust-seq
      - myblog-rabbitmq
    networks:
      - rabbitmq
      - logger-net  

  reaction-api:
    container_name: reaction-api
    restart: always
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - DatabaseSettings:ConnectionString=mongodb://myblog-reactiondb:27018
      - RabbitMQ=MyBlog_Rabbitmq
    image: reaction_api_image
    build: 
      context: .
      dockerfile: Services/Reaction/ReactionAPI/Dockerfile
    ports:
      - "5017:80"
    depends_on:
      - myblog-rabbitmq
      - myblog-reactiondb
    networks:
      - rabbitmq
      - reactiondb-net

networks:
  rabbitmq:
  # es-net:
  #   driver: bridge
  redis-net:
  categorydb-net:
  commentdb-net:
  contentdb-net:
  identitydb-net:
  minio-net:
  logger-net:
  reactiondb-net:

volumes:
  category_data:
  reaction_data:
  comment_data:
  content_data:
  identity_data:
  rabbitmq_data:
  datalust_seq_data:
  minio_data:
  redis_data:
  # elasticsearch-data:
  #   driver: local
  # kibana-data:
  #   driver: local
  # jaeger-data: 